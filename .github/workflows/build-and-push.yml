name: Build and Push Multi-Arch Docker Images (Seismotracker & Lightdash)

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-seismotracker:
    runs-on: ubuntu-24.04
    if: contains(github.event.head_commit.message, '#BUILD')
    strategy:
      matrix:
        services:
          - name: seismo-init
            folder: init
            dockerfile: Dockerfile
          - name: seismo-fetcher
            folder: seismo-fetcher
            dockerfile: Dockerfile
          - name: seismo-api
            folder: seismo-api
            dockerfile: Dockerfile
          - name: postgres-gis
            folder: postgres
            dockerfile: Dockerfile
          - name: dbt
            folder: dbt
            dockerfile: Dockerfile
            target: dbt-postgres
      max-parallel: 5
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      - name: Generate Unique Tag
        id: unique_tag
        run: |
          UNIQUE_TAG="build-${{ github.run_id }}-$(date +%s)"
          echo "Generated unique tag: $UNIQUE_TAG"
          echo "unique_tag=$UNIQUE_TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Multi-Arch Image (No Cache)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.services.folder }}
          file: ${{ matrix.services.folder }}/${{ matrix.services.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ghcr.io/${{ github.repository }}/${{ matrix.services.name }}:${{ steps.unique_tag.outputs.unique_tag }}
            ghcr.io/${{ github.repository }}/${{ matrix.services.name }}:latest
          no-cache: true
          provenance: false
          target: ${{ matrix.services.target || '' }}

  build-lightdash-arm64:
    runs-on: ubuntu-22.04-arm
    if: contains(github.event.head_commit.message, '#LIGHTDASH')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      - name: Build and Push Lightdash ARM64 Image (No Cache)
        uses: docker/build-push-action@v6
        with:
          context: lightdash
          file: lightdash/Dockerfile
          platforms: linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository }}/lightdash:arm64
          no-cache: true
          provenance: false

  build-lightdash-amd64:
    runs-on: ubuntu-24.04
    if: contains(github.event.head_commit.message, '#LIGHTDASH')
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      - name: Build and Push Lightdash AMD64 Image (No Cache)
        uses: docker/build-push-action@v6
        with:
          context: lightdash
          file: lightdash/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ghcr.io/${{ github.repository }}/lightdash:amd64
          no-cache: true
          provenance: false

  create-lightdash-manifest:
    runs-on: ubuntu-24.04
    needs: [build-lightdash-arm64, build-lightdash-amd64]
    steps:
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      - name: Create Lightdash Multi-Arch Image Manifest
        run: |
          docker manifest create ghcr.io/${{ github.repository }}/lightdash:latest \
            ghcr.io/${{ github.repository }}/lightdash:arm64 \
            ghcr.io/${{ github.repository }}/lightdash:amd64
          docker manifest push ghcr.io/${{ github.repository }}/lightdash:latest