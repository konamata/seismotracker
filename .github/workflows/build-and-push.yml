name: Build and Push Multi-Arch Docker Images

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitmodules'
      - '*/.git' 
      - '**/submodule-directory/**'

env:
  PLATFORMS: linux/amd64,linux/arm64

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  update-submodules:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check_changes.outputs.has_changes }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.MY_PAT_TOKEN }}

      - name: Update Submodules
        id: update_submodules
        run: |
          git submodule update --remote --recursive
          git status

      - name: Check for Changes
        id: check_changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Submodules have updates."
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and Push Changes
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          if [[ "$GITHUB_ACTOR" == "github-actions[bot]" ]]; then
            echo "Skipping push to prevent infinite loop."
            exit 0
          fi
      
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          git add .
          git commit -m "Auto-update submodules to latest commit"
          git push origin main

  build-and-push:
    runs-on: ubuntu-latest
    needs: update-submodules
    strategy:
      matrix:
        services:
          - name: lightdash
            dockerfile: Dockerfile
          - name: seismotracker
            dockerfile: Dockerfile

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ env.PLATFORMS }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}

      - name: Generate Unique Tag
        id: unique_tag
        run: |
          UNIQUE_TAG="build-${{ github.run_id }}-$(date +%s)"
          echo "Generated unique tag: $UNIQUE_TAG"
          echo "unique_tag=$UNIQUE_TAG" >> $GITHUB_OUTPUT

      - name: Build and Push Multi-Arch Image (No Cache)
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.services.name }}
          file: ${{ matrix.services.name }}/${{ matrix.services.dockerfile }}
          platforms: ${{ env.PLATFORMS }}
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.services.name }}:${{ steps.unique_tag.outputs.unique_tag }}
          no-cache: true